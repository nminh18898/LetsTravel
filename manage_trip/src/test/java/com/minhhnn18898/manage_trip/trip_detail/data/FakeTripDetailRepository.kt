package com.minhhnn18898.manage_trip.trip_detail.data

import com.minhhnn18898.manage_trip.trip_detail.data.model.AirportInfo
import com.minhhnn18898.manage_trip.trip_detail.data.model.FlightInfo
import com.minhhnn18898.manage_trip.trip_detail.data.model.FlightWithAirportInfo
import com.minhhnn18898.manage_trip.trip_detail.data.model.HotelInfo
import com.minhhnn18898.manage_trip.trip_detail.data.model.TripActivityInfo
import com.minhhnn18898.manage_trip.trip_detail.data.repo.ExceptionInsertFlightInfo
import com.minhhnn18898.manage_trip.trip_detail.data.repo.TripDetailRepository
import kotlinx.coroutines.channels.BufferOverflow
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow

class FakeTripDetailRepository: TripDetailRepository {

    private var autoGeneratedId = 1L

    private val flightInfoMap: LinkedHashMap<Long, FlightWithAirportInfo> = LinkedHashMap()
    private val flightInfosFlow: MutableSharedFlow<List<FlightWithAirportInfo>> =
        MutableSharedFlow(replay = 1, onBufferOverflow = BufferOverflow.DROP_OLDEST)

    var forceError = false

    override fun getListFlightInfo(tripId: Long): Flow<List<FlightWithAirportInfo>> {
        TODO("Not yet implemented")
    }

    override suspend fun getFlightInfo(flightId: Long): Flow<FlightWithAirportInfo?> {
        TODO("Not yet implemented")
    }

    override suspend fun insertFlightInfo(
        tripId: Long,
        flightInfo: FlightInfo,
        departAirport: AirportInfo,
        destinationAirport: AirportInfo
    ): Long {
        if(forceError) {
            throw ExceptionInsertFlightInfo()
        }

        val currentId = autoGeneratedId
        flightInfoMap[autoGeneratedId] = FlightWithAirportInfo(
            flightInfo = flightInfo.copy(flightId = 0L),
            departAirport = departAirport,
            destinationAirport = destinationAirport
        )
        autoGeneratedId++
        return currentId
    }

    override suspend fun updateFlightInfo(tripId: Long, flightInfo: FlightInfo, departAirport: AirportInfo, destinationAirport: AirportInfo) {
        TODO("Not yet implemented")
    }

    override suspend fun deleteFlightInfo(flightId: Long) {
        TODO("Not yet implemented")
    }

    override fun getAllHotelInfo(tripId: Long): Flow<List<HotelInfo>> {
        TODO("Not yet implemented")
    }

    override suspend fun getHotelInfo(hotelId: Long): Flow<HotelInfo?> {
        TODO("Not yet implemented")
    }

    override suspend fun insertHotelInfo(tripId: Long, hotelInfo: HotelInfo) {
        TODO("Not yet implemented")
    }

    override suspend fun updateHotelInfo(tripId: Long, hotelInfo: HotelInfo) {
        TODO("Not yet implemented")
    }

    override suspend fun deleteHotelInfo(hotelId: Long) {
        TODO("Not yet implemented")
    }

    override fun getSortedActivityInfo(tripId: Long): Flow<Map<Long?, List<TripActivityInfo>>> {
        TODO("Not yet implemented")
    }

    override fun getActivityInfo(activityId: Long): Flow<TripActivityInfo?> {
        TODO("Not yet implemented")
    }

    override suspend fun insertActivityInfo(tripId: Long, activityInfo: TripActivityInfo) {
        TODO("Not yet implemented")
    }

    override suspend fun updateActivityInfo(tripId: Long, activityInfo: TripActivityInfo) {
        TODO("Not yet implemented")
    }

    override suspend fun deleteActivityInfo(activityId: Long) {
        TODO("Not yet implemented")
    }
}